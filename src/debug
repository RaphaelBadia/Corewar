#ifdef DEBUG
#define STOP_CYCLE 1
#endif
int debug;


#ifdef DEBUG
		if (vm->cycle > STOP_CYCLE)
		{
#endif
#ifdef SHIT
			printf("=======before======\n");
			printf("id proc %-4u pc %-4x", process->id, process->pc /* - process->pc % 64, process->pc % 64 */);
			printf("op_code %u %s\n", process->op_code, NULL);
#endif
#ifdef DEBUG
		}
#endif


#ifdef DEBUG
		if (vm->cycle > STOP_CYCLE)
		{
#endif
#ifdef SHIT
			printf("=======before======\n");
			printf("id proc %-4u pc %-4x", process->id, process->pc /* - process->pc % 64, process->pc % 64 */);
			printf("op_code %u %s\n", process->op_code, NULL);
#endif
#ifdef DEBUG
		}
#endif


#ifdef DEBUG
	if (vm->cycle > STOP_CYCLE)
	{
#endif
#ifdef SHIT
		char c;
		printf("=========after========\n");
		printf("id proc %-4u pc %-4x", process->id, process->pc /* - process->pc % 64, process->pc % 64 */);
		printf("vm->nb_process %-4u\n", vm->nb_process);
		int i = 0;
		while (i < vm->nb_player)
		{
			printf("name %-20s live %-5u ", vm->champ[i].name, vm->champ[i].live);
			++i;
		}
		printf("\n");
		i = 0;
		while (i < vm->nb_player)
		{
			printf("last_live %-26u ", vm->champ[i].last_live);
			++i;
		}
		printf("\n");
		printf("vm->cycle %-15u", vm->cycle);
		printf("vm->live %-5u cycle_to_die %-5u, checks %-5u last_check %u\n",vm->live, vm->cycle_to_die, vm->checks + 1, debug);
		print_map(vm->map);
		fflush(stdout);
//		usleep(7500);
		read(0, &c, 1);
		printf("\e[2J");
#endif
#ifdef DEBUG
	}
#endif


debug = (last_check = vm->cycle);